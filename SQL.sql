--TEMA: ESCAPAMENTOS
--EQUIPE: DANIEL ROCHA, GABRIEL LOBO, JEFFERSON BATISTA, MARCOS COELHO E LARISSA PRADO

-- MELHORAMOS AS FUNÇÕES PRODUTOABAIXOESTOQUE E CLIENTESQUEDEVEM
-- CRIAMOS AS TABELAS CATEGORIA E MARCA
-- CRIAMOS AS FUNÇÕES PARA AUMENTAR/DIMINUIR O PREÇO DO PRODUTO NA FÁBRICA DE ACORDO A MARCA DO PRODUTO

-- TABLES
CREATE TABLE MOTOR(
    IDMOTOR SERIAL PRIMARY KEY,
    POTENCIA VARCHAR(3)
);
CREATE TABLE CARRO(
    IDCARRO SERIAL PRIMARY KEY,
    MODELO VARCHAR(30)
);
CREATE TABLE FABRICACAO(
    IDFABRICACAO SERIAL PRIMARY KEY,
    ANO INT 
);
CREATE TABLE VALVULAS(
    IDVALVULAS SERIAL PRIMARY KEY,
    QUANTIDADE INT
);
CREATE TABLE LOCALIZACAO(
    IDLOCALIZACAO SERIAL PRIMARY KEY,
    DEPARTAMENTO VARCHAR(30)
);
CREATE TABLE CATEGORIA(
    IDCATEGORIA SERIAL PRIMARY KEY,
    CATEGORIA VARCHAR(30)
);
CREATE TABLE MARCA(
    IDMARCA SERIAL PRIMARY KEY,
    MARCA VARCHAR(30)
);
CREATE TABLE PRODUTO(
    IDPRODUTO SERIAL PRIMARY KEY,
    IDMOTOR INT,
    IDCARRO INT,
    IDVALVULAS INT,
    IDFABRICACAO INT,
    IDCATEGORIA INT,
    IDMARCA INT,
    ICMS NUMERIC(7, 2),
    IPI NUMERIC(7, 2),
    FRETE NUMERIC(7, 2),
    VALORNAFABRICA NUMERIC(7, 2),
    VALORDECOMPRA NUMERIC(7, 2),
    LUCRO NUMERIC(7, 2),
    VALORVENDA NUMERIC(7, 2),
    DESCONTO NUMERIC(5, 2),
    QUANTIDADE NUMERIC(5, 2),
    UNIDADE CHAR(2),
    IDLOCALIZACAO INT,
    REFERENCIA VARCHAR(20),
    FOREIGN KEY(IDMOTOR) REFERENCES MOTOR(IDMOTOR),
    FOREIGN KEY(IDCARRO) REFERENCES CARRO(IDCARRO),
    FOREIGN KEY(IDVALVULAS) REFERENCES VALVULAS(IDVALVULAS),
    FOREIGN KEY(IDFABRICACAO) REFERENCES FABRICACAO(IDFABRICACAO),
    FOREIGN KEY(IDCATEGORIA) REFERENCES CATEGORIA(IDCATEGORIA),
    FOREIGN KEY(IDMARCA) REFERENCES MARCA(IDMARCA),
    FOREIGN KEY(IDLOCALIZACAO) REFERENCES LOCALIZACAO(IDLOCALIZACAO)
);
CREATE TABLE FORNECEDOR(
    IDFORNECEDOR SERIAL PRIMARY KEY,
    NOME VARCHAR(50),
    ENDERECO VARCHAR(80),
    TELEFONE VARCHAR(20),
    CNPJ VARCHAR(30)
);
CREATE TABLE ENTRADA(
    IDENTRADA INT PRIMARY KEY,
    IDFORNECEDOR INT,
    VALORTOTALNOTA NUMERIC(7, 2),
    DATACOMPRA DATE
);
CREATE TABLE ITENSENTRADA(
    IDITENSENTRADA INT PRIMARY KEY,
    IDENTRADA INT,
    IDPRODUTO INT,
    PRECOCOMPRA NUMERIC(7, 2),
    QUANTIDADE NUMERIC(5, 2),
    UNIDADE CHAR(2),
    IPI NUMERIC(5, 2),
    FRETE NUMERIC(5, 2),
    ICMS NUMERIC(5, 2),
    FOREIGN KEY(IDPRODUTO) REFERENCES PRODUTO(IDPRODUTO),
    FOREIGN KEY(IDENTRADA) REFERENCES ENTRADA(IDENTRADA)
);
CREATE TABLE FORMAPAGAMENTO(
    IDFORMAPAGAMENTO SERIAL PRIMARY KEY,
    CONDICAO VARCHAR(20),
    FORMA VARCHAR(20)
);
CREATE TABLE CLIENTE(
    IDCLIENTE SERIAL PRIMARY KEY,
    NOME VARCHAR(50),
    TELEFONE VARCHAR(20),
    CNPJ VARCHAR(30),
    CPF VARCHAR(20),
    DEBITO FLOAT
);
CREATE TABLE VENDA(
    IDVENDA SERIAL PRIMARY KEY,
    IDCLIENTE INT,
    IDFORMAPAGAMENTO INT,
    DATA DATE,
    VALORTOTAL FLOAT,
    FOREIGN KEY(IDCLIENTE) REFERENCES CLIENTE(IDCLIENTE),
    FOREIGN KEY(IDFORMAPAGAMENTO) REFERENCES FORMAPAGAMENTO(IDFORMAPAGAMENTO)
);
CREATE TABLE ITENSVENDA(
    IDITENSVENDA SERIAL PRIMARY KEY,
    IDPRODUTO INT,
    IDVENDA INT,
    QUANTIDADE INT,
    VALORVENDA NUMERIC(7, 2),
    DESCONTO NUMERIC(7, 2),
    LUCRO NUMERIC(7, 2),
    FOREIGN KEY(IDPRODUTO) REFERENCES PRODUTO(IDPRODUTO),
    FOREIGN KEY(IDVENDA) REFERENCES VENDA(IDVENDA)
);

-- TRIGGERS
-- ITENSENTRADA
CREATE OR REPLACE FUNCTION ADICIONA_PRODUTO_ESTOQUE() RETURNS TRIGGER AS $$
  DECLARE
    IMPOSTOS FLOAT := NEW.ICMS * NEW.IPI * NEW.FRETE;
  BEGIN
    UPDATE PRODUTO SET QUANTIDADE = QUANTIDADE + NEW.QUANTIDADE, ICMS = (ICMS + NEW.ICMS)/2, IPI = (IPI + NEW.IPI)/2, FRETE = (FRETE + NEW.FRETE)/2, VALORNAFABRICA = (VALORNAFABRICA + NEW.PRECOCOMPRA)/2, VALORDECOMPRA = (VALORDECOMPRA + NEW.PRECOCOMPRA * IMPOSTOS)/2, VALORVENDA = (NEW.PRECOCOMPRA * IMPOSTOS) + ((NEW.PRECOCOMPRA * IMPOSTOS) * (LUCRO/100)), DESCONTO = 10 WHERE IDPRODUTO = NEW.IDPRODUTO;
  RETURN NULL;
  END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER ADI_PRODUTO_ESTOQUE AFTER INSERT ON ITENSENTRADA FOR EACH ROW EXECUTE PROCEDURE ADICIONA_PRODUTO_ESTOQUE();

--
CREATE OR REPLACE FUNCTION ATUALIZA_PRODUTO_ESTOQUE() RETURNS TRIGGER AS $$
  BEGIN
    IF(NEW.QUANTIDADE != OLD.QUANTIDADE) THEN
      UPDATE PRODUTO SET QUANTIDADE = QUANTIDADE - (NEW.QUANTIDADE - OLD.QUANTIDADE) WHERE IDPRODUTO = NEW.IDPRODUTO;
    END IF;
    IF(NEW.ICMS != OLD.ICMS) THEN
      UPDATE PRODUTO SET ICMS = (ICMS + (NEW.ICMS - OLD.ICMS)/2) WHERE IDPRODUTO = NEW.IDPRODUTO;
    END IF;
    IF(NEW.IPI != OLD.IPI) THEN
      UPDATE PRODUTO SET IPI = (IPI + (NEW.IPI - OLD.IPI)/2) WHERE IDPRODUTO = NEW.IDPRODUTO;
    END IF;
    IF(NEW.FRETE != OLD.FRETE) THEN
      UPDATE PRODUTO SET FRETE = (FRETE + (NEW.FRETE - OLD.FRETE)/2) WHERE IDPRODUTO = NEW.IDPRODUTO;
    END IF;
    IF(NEW.PRECOCOMPRA != OLD.PRECOCOMPRA) THEN
      UPDATE PRODUTO SET VALORNAFABRICA = VALORNAFABRICA + (NEW.PRECOCOMPRA - OLD.PRECOCOMPRA)/2, VALORDECOMPRA = VALORDECOMPRA + ((NEW.PRECOCOMPRA - OLD.PRECOCOMPRA) * (ICMS * IPI * FRETE))/2, VALORVENDA = VALORVENDA + ((NEW.PRECOCOMPRA - OLD.PRECOCOMPRA) * (ICMS * IPI * FRETE)) + ((NEW.PRECOCOMPRA - OLD.PRECOCOMPRA) * (ICMS * IPI * FRETE) * (LUCRO/100)) WHERE IDPRODUTO = NEW.IDPRODUTO;
    END IF;
    RETURN NULL;
  END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER ATU_PRODUTO_ESTOQUE AFTER UPDATE ON ITENSENTRADA FOR EACH ROW EXECUTE PROCEDURE ATUALIZA_PRODUTO_ESTOQUE();

--
CREATE OR REPLACE FUNCTION REMOVE_PRODUTO_ESTOQUE() RETURNS TRIGGER AS $$
  DECLARE
    IMPOSTOS FLOAT := OLD.ICMS * OLD.IPI * OLD.FRETE;
  BEGIN
    UPDATE PRODUTO SET QUANTIDADE = QUANTIDADE - OLD.QUANTIDADE, ICMS = ICMS - (OLD.ICMS - ICMS), IPI = IPI - (OLD.IPI - IPI), FRETE = FRETE - (OLD.FRETE - FRETE), VALORNAFABRICA = VALORNAFABRICA + (VALORNAFABRICA - OLD.PRECOCOMPRA), VALORDECOMPRA = VALORDECOMPRA + (VALORDECOMPRA - OLD.PRECOCOMPRA * IMPOSTOS), VALORVENDA = VALORVENDA + (VALORDECOMPRA - OLD.PRECOCOMPRA * IMPOSTOS) - (VALORDECOMPRA - (OLD.PRECOCOMPRA*IMPOSTOS) * (LUCRO/100)), DESCONTO = 10 WHERE IDPRODUTO = OLD.IDPRODUTO;
    RETURN NULL;
  END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER REM_PRODUTO_ESTOQUE AFTER DELETE ON ITENSENTRADA FOR EACH ROW EXECUTE PROCEDURE REMOVE_PRODUTO_ESTOQUE();

-- ITENSVENDA
--
CREATE OR REPLACE FUNCTION REMOVERDOESTOQUE_SOMARPRODUTOS_VENDA() RETURNS TRIGGER AS $$
  BEGIN
      IF (SELECT QUANTIDADE FROM PRODUTO WHERE IDPRODUTO = NEW.IDPRODUTO) - NEW.QUANTIDADE < 0 THEN
        RAISE EXCEPTION 'QUANTIDADE INSUFICIENTE NO ESTOQUE.';
      END IF;

      UPDATE PRODUTO SET QUANTIDADE = QUANTIDADE - NEW.QUANTIDADE WHERE IDPRODUTO = NEW.IDPRODUTO;
      UPDATE VENDA SET VALORTOTAL = (SELECT SUM(QUANTIDADE*VALORVENDA) FROM ITENSVENDA WHERE IDVENDA = NEW.IDVENDA) WHERE IDVENDA = NEW.IDVENDA;
    RETURN NULL;
  END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER TOTAL_VENDA AFTER INSERT ON ITENSVENDA FOR EACH ROW EXECUTE PROCEDURE REMOVERDOESTOQUE_SOMARPRODUTOS_VENDA();

--
CREATE OR REPLACE FUNCTION APAGARVENDA() RETURNS TRIGGER AS $$
  DECLARE
    OLD_VALORCOMPRA DECIMAL(7,2) := (SELECT P.VALORCOMPRA FROM PRODUTO P WHERE P.IDPRODUTO = OLD.IDPRODUTO);
  BEGIN
    UPDATE PRODUTO SET QUANTIDADE = QUANTIDADE + OLD.QUANTIDADE, LUCRO = LUCRO - ((OLD.VALORVENDA - OLD_VALORCOMPRA) * OLD.QUANTIDADE) WHERE IDPRODUTO = OLD.IDPRODUTO;
    UPDATE VENDA SET VALORTOTAL = VALORTOTAL - (OLD.QUANTIDADE * OLD.VALORVENDA) WHERE IDVENDA = OLD.IDVENDA;
  RETURN NULL;
  END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER APAGARVENDA AFTER DELETE ON ITENSVENDA FOR EACH ROW EXECUTE PROCEDURE APAGARVENDA();

-- FUNÇÕES
-- VENDA DO DIA
CREATE OR REPLACE FUNCTION VENDADODIA(DATA DATE) RETURNS SETOF venda AS $$
  BEGIN
    RETURN QUERY
      SELECT * FROM VENDA V WHERE V.DATA = $1 GROUP BY IDVENDA;
  END;
$$ LANGUAGE PLPGSQL;

-- PRODUTOS ABAIXO ESTOQUE 
CREATE OR REPLACE FUNCTION PRODUTOSABAIXOESTOQUE(QUANTIDADES FLOAT) RETURNS TABLE(IDPRODUTO INT, TIPO VARCHAR, REFERENCIA VARCHAR, QUANTIDADE NUMERIC) AS $$
  BEGIN
    RETURN QUERY
      SELECT P.IDPRODUTO, C.CATEGORIA, P.REFERENCIA, P.QUANTIDADE FROM PRODUTO P, CATEGORIA C WHERE P.QUANTIDADE < $1 AND P.IDCATEGORIA = C.IDCATEGORIA GROUP BY P.IDPRODUTO, C.IDCATEGORIA ORDER BY P.QUANTIDADE ASC;
  END;
$$ LANGUAGE PLPGSQL;



-- CLIENTES QUE DEVEM
CREATE OR REPLACE FUNCTION CLIENTESQUEDEVEM() RETURNS TABLE (IDCLIENTE INT,NOME VARCHAR, DEBITO FLOAT)  AS $$
  BEGIN
    RETURN QUERY
      SELECT C.IDCLIENTE, C.NOME, C.DEBITO FROM CLIENTE C WHERE C.DEBITO > 0 GROUP BY C.IDCLIENTE ORDER BY DEBITO DESC;
  END;
$$ LANGUAGE PLPGSQL;

-- PRODUTOS MAIS VENDIDOS
CREATE OR REPLACE FUNCTION PRODUTOSMAISVENDIDOS(MES INTEGER) RETURNS TABLE (NOME_DO_PRODUTO VARCHAR, REFERENCIA VARCHAR, QUANTIDADE BIGINT) AS $$
  BEGIN
    RETURN QUERY
      SELECT C.CATEGORIA, P.REFERENCIA, SUM(IV.QUANTIDADE) AS QUANTIDADE FROM ITENSVENDA IV, VENDA V, PRODUTO P, CATEGORIA C WHERE IV.IDVENDA = V.IDVENDA AND C.IDCATEGORIA = P.IDCATEGORIA AND P.IDPRODUTO = IV.IDPRODUTO AND EXTRACT(MONTH FROM V.DATA) = $1 GROUP BY P.IDPRODUTO, C.CATEGORIA ORDER BY QUANTIDADE DESC;
  END;
$$ LANGUAGE PLPGSQL;

-- TOTAL VENDIDO NO DIA
CREATE OR REPLACE FUNCTION TOTALVENDIDODIA(DIA DATE) RETURNS TABLE(TOTAL FLOAT) AS $$
  BEGIN
    RETURN QUERY
      SELECT SUM(V.VALORTOTAL) FROM VENDA V WHERE V.DATA = $1;
  END;
$$ LANGUAGE PLPGSQL;

-- TOTAL VENDIDO NO MÊS
CREATE OR REPLACE FUNCTION TOTALVENDIDOMES(MES INTEGER) RETURNS TABLE (TOTAL FLOAT) AS $$
  BEGIN
    RETURN QUERY
      SELECT SUM(V.VALORTOTAL) FROM VENDA V WHERE EXTRACT(MONTH FROM V.DATA) = $1;
  END;
$$ LANGUAGE PLPGSQL;

-- ATUALIZAR PREÇO POR MARCA, AUMENTANDO
CREATE OR REPLACE FUNCTION AUMENTARPRECOPRODUTOSMARCA(MARCA VARCHAR, REAJUSTE INT) RETURNS TABLE(IDPRODUTO INT, CATEGORIA VARCHAR, REFERENCIA VARCHAR, VALOR_ANTIGO NUMERIC(7, 2), VALOR_REAJUSTADO NUMERIC(7, 2)) AS $$
  BEGIN
    RETURN QUERY
      UPDATE PRODUTO P SET VALORNAFABRICA = P.VALORNAFABRICA + P.VALORNAFABRICA*$2/100 FROM CATEGORIA C WHERE P.IDMARCA = (SELECT M.IDMARCA FROM MARCA M WHERE M.MARCA = $1) AND P.IDCATEGORIA = C.IDCATEGORIA RETURNING P.IDPRODUTO, C.CATEGORIA, P.REFERENCIA, (SELECT Y.VALORNAFABRICA FROM PRODUTO Y WHERE Y.IDPRODUTO = P.IDPRODUTO), P.VALORNAFABRICA;
  END;
$$ LANGUAGE PLPGSQL;
-- ATUALIZAR PREÇO POR MARCA, DIMINUINDO
CREATE OR REPLACE FUNCTION DIMINUIRPRECOPRODUTOSMARCA(MARCA VARCHAR, REAJUSTE INT) RETURNS TABLE(IDPRODUTO INT, CATEGORIA VARCHAR, REFERENCIA VARCHAR, VALOR_ANTIGO NUMERIC(7, 2), VALOR_REAJUSTADO NUMERIC(7, 2)) AS $$
  BEGIN
    RETURN QUERY
      UPDATE PRODUTO P SET VALORNAFABRICA = P.VALORNAFABRICA - P.VALORNAFABRICA*$2/100 FROM CATEGORIA C WHERE P.IDMARCA = (SELECT M.IDMARCA FROM MARCA M WHERE M.MARCA = $1) AND P.IDCATEGORIA = C.IDCATEGORIA RETURNING P.IDPRODUTO, C.CATEGORIA, P.REFERENCIA, (SELECT Y.VALORNAFABRICA FROM PRODUTO Y WHERE Y.IDPRODUTO = P.IDPRODUTO), P.VALORNAFABRICA;
  END;
$$ LANGUAGE PLPGSQL;


-- INSERTS
INSERT INTO MOTOR(IDMOTOR, POTENCIA) VALUES(1, '1.4'), (2, '1.6'), (3, '1.0'), (4, '2.0'), (5, '1.2'), (6, '1.7'), (7, '2.5'), (8, '1.5'), (9, '3.0'), (10, '0.5');
INSERT INTO CARRO(IDCARRO, MODELO) VALUES(1, 'GOL'), (2, 'SIENA'), (3, 'FUSCA'), (4, 'CUPÊ'), (5, 'CROSSOVER'), (6, 'SEDAN'), (7, 'UNO'), (8, 'PALIO'), (9, 'CELTA'), (10, 'CORSA');
INSERT INTO FABRICACAO(IDFABRICACAO, ANO) VALUES(1, 2002), (2, 2004), (3, 1993), (4, 2005), (5, 2000), (6, 1994), (7, 1997), (8, 2006), (9, 2008), (10, 2010);
INSERT INTO VALVULAS(IDVALVULAS, QUANTIDADE) VALUES(1, 8), (2, 16);
INSERT INTO LOCALIZACAO(IDLOCALIZACAO, DEPARTAMENTO) VALUES
    (1, 'DEPART.1'),
    (2, 'DEPART.4'),
    (3, 'DEPART.7'),
    (4, 'DEPART.7'),
    (5, 'DEPART.4'),
    (6, 'DEPART.5'),
    (7, 'DEPART.7'),
    (8, 'DEPART.1'),
    (9, 'DEPART.7'),
    (10, 'DEPART.4');
INSERT INTO CATEGORIA(IDCATEGORIA, CATEGORIA) VALUES(1, 'CATALISADOR'), (2, 'SILENCIOSO'), (3, 'TUBO');
INSERT INTO MARCA(IDMARCA, MARCA) VALUES(1, 'TUPER'), (2, 'MASTER');
INSERT INTO PRODUTO(IDPRODUTO, IDMOTOR, IDCARRO, IDVALVULAS, IDFABRICACAO, IDCATEGORIA, IDMARCA, ICMS, IPI, FRETE, VALORNAFABRICA, VALORDECOMPRA, LUCRO, VALORVENDA, DESCONTO, QUANTIDADE, UNIDADE, IDLOCALIZACAO, REFERENCIA) VALUES
    (1, 1, 1, 1, 1, 1, 1, 1.1, 1.1, 1.1, 74.5, 99.15, 20, 118.99, 10, 9, 'UN', 1, 'X9POTE-03SIENA'),
    (2, 2, 2, 2, 2, 2, 2, 1.1, 1.1, 1.1, 210, 279.51, 20, 335.41, 10, 5, 'UN', 2, 'Z336BERYL-09FUSCA'),
    (3, 3, 3, 1, 3, 3, 1, 1.1, 1.1, 1.1, 95.40, 126.97, 20, 152.37, 10, 4, 'UN', 3, 'Z372BERYL-12CUPÊ'),
    (4, 4, 4, 1, 4, 1, 2, 1.1, 1.1, 1.1, 89.50, 135.97, 20, 200.50, 10, 3, 'UN', 4, 'X2POTE-05CROSSOVER'),
    (5, 5, 5, 2, 5, 2, 1, 1.1, 1.1, 1.1, 190.40, 160.97, 20, 190.75, 10, 5, 'UN', 5, 'T9POTE-08SEDAN'),
    (6, 6, 6, 1, 6, 3, 2, 1.1, 1.1, 1.1, 195.90, 170.97, 20, 210.30, 10, 4, 'UN', 6, 'Z512BERY-09UNO'),
    (7, 7, 7, 2, 7, 1, 1, 1.1, 1.1, 1.1, 189.40, 179.34, 30, 310.41, 10, 6, 'UN', 7, 'X8POTE-05PALIO'),
    (8, 8, 8, 2, 8, 2, 2, 1.1, 1.1, 1.1, 210, 230.67, 20, 290.50, 10, 2, 'UN', 8, 'Z323BERYL-13CELTA'),
    (9, 9, 9, 1, 9, 3, 1, 1.1, 1.1, 1.1, 193.40, 183.83, 20, 270.43, 10, 7, 'UN', 9, 'X1POTE-07CORSA'),
    (10, 10, 10, 1, 10, 1, 2, 1.1, 1.1, 1.1, 197.40, 273.97, 20, 324.62, 10, 3, 'UN', 10, 'JHQOKE-05G4GOL');
INSERT INTO CLIENTE(IDCLIENTE, NOME, TELEFONE, CPF, DEBITO) VALUES
    (1, 'GABRIEL LOBO', '0800190190190', '03278987952', 0.0),
    (2, 'DANIEL ROCHA', '080033458960', '11118987952', 0.0),
    (3, 'JEFFERSON BATISTA', '080014030589', '06666666152', 0.0),
    (4, 'LARISSA PRADO', '0800165789014', '04788987052', 0.0),
    (5, 'MARCOS COELHO', '7799158639','08793605896', 0.0),
    (6, 'JOÃO RIBEIRO', '0800153289014', '04534987052', 0.0),
    (7, 'MATHEUS COCA', '0800165975014', '05521987052', 0.0),
    (8, 'ARTHUR MAGALHÃES', '7799112789014', '97688987052', 0.0),
    (9, 'REGIS TAWAN', '0800163089014', '01828987052', 0.0),
    (10, 'GEORGE MARTIN', '0800165455014', '97288987052', 0.0),
    (11, 'FÁBIO LIMA', '0800105998814', '97288987442', 20.0),
    (12, 'FÁBIOLA LIMA', '0820105998814', '27288987442', 40.0),
    (13, 'FÁBRICIO LIMA', '0800333998814', '97288387442', 23.5);
INSERT INTO FORMAPAGAMENTO(IDFORMAPAGAMENTO, CONDICAO, FORMA) VALUES
    (1, 'PRAZO', 'CARTÃO'), (2, 'A VISTA', 'CARNÊ'), (3, 'PRAZO', 'CARTÃO'), (4, 'A VISTA', 'CARNÊ'), (5, 'PRAZO', 'CARNÊ'),
    (6, 'A VISTA', 'CARTÃO'), (7, 'PRAZO', 'CARNÊ'), (8, 'A VISTA', 'CARTÃO'), (9, 'PRAZO', 'CARNÊ'), (10, 'A VISTA', 'CARTÃO');
INSERT INTO FORNECEDOR(IDFORNECEDOR, NOME, ENDERECO, TELEFONE, CNPJ) VALUES
    (1, 'JOSIMAR BORBA', 'RUA TAVARES DE ALMEIDA', '(77) 34513-2145', '8123653215548'),
    (2, 'FRANCISCO LOSA', 'RUA TEIXEIRA FOGOSIS', '(12)23654-5413', '5646513884462'),
    (3, 'MARIELE COTRIM', 'RUA EUCLIDE BUNGGER', '(71)65512-5556', '7815554887722'),
    (4, 'DÉBORA CASQUEIRA', 'AVENIDA BRASIL', '(80) 91112-2326', '3854381829386'),
    (5, 'ARIELE TAVARES ', 'RUA SÃO FRANCISCO', '(81) 9161-11570', '7077307264734'),
    (6, 'TAMAR FEIRA TORRES', 'RUA TIRADENTES', '(92) 99225-9674', '1231640331918'),
    (7, 'SANDRO BELTRÃO BARROSO', 'RUA PARANA', '(21) 92596-7455', '3157228487448'),
    (8, 'AURORA BORJA AZEVEDO', 'RUA BELA VISTA', '(50) 96859-0282', '83839472477688'),
    (9, 'CIARA MARTINS', 'RUA SÃO JORGE', '(62) 92672-5513', '6345851461233'),
    (10, 'JACINTO CALADO PEÇANHA', 'RUA PROJETADA', '(13) 65512-5556', '5561151029866');
INSERT INTO ENTRADA(IDENTRADA, VALORTOTALNOTA, DATACOMPRA, IDFORNECEDOR) VALUES
    (1, 0, '2020-11-18', 1), (2, 0, '2020-11-25', 2), (3, 0, '2020-12-10', 3), (4, 0, '2021-01-01', 4), (5, 0, '2021-01-15', 5),
    (6, 0, '2021-02-10', 6), (7, 0, '2021-02-16', 7), (8, 0, '2021-02-25', 8), (9, 0, '2021-03-02', 9), (10, 0, '2021-03-03', 10);
INSERT INTO ITENSENTRADA(IDITENSENTRADA, IDENTRADA, IDPRODUTO, PRECOCOMPRA, QUANTIDADE, UNIDADE, IPI, FRETE, ICMS) VALUES
    (1, 1, 1, 120, 10, 'UN', 1.2, 1.2, 1.2), (2, 2, 2, 121, 20, 'UN', 1.3, 1.3, 1.2), (3, 3, 3, 121, 8, 'UN', 1.5, 2.3, 1.5), (4, 4, 4, 123, 9, 'UN', 1.6, 1.3, 1.3), (5, 5, 5, 119, 9, 'UN', 1.5, 1.3, 1.3),
    (6, 6, 6, 118, 12, 'UN', 1.9, 1.4, 1.4), (7, 7, 7, 126, 15, 'UN', 1.1, 1.5, 1.4), (8, 8, 8, 124, 18, 'UN', 1.5, 1.5, 1.5), (9, 9, 9, 122, 15, 'UN', 1.9, 1.7, 1.4), (10, 10, 10, 121, 50, 'UN', 1.8, 2.0, 1.6);
INSERT INTO VENDA(IDVENDA, IDCLIENTE, IDFORMAPAGAMENTO, DATA, VALORTOTAL) VALUES
    (1, 1, 1, '2021-04-11', 0), (2, 2, 2, '2021-03-11', 0), (3, 3, 3, '2021-03-11', 0), (4, 4, 4, '2021-03-11', 0), (5, 5, 5, '2021-03-11', 0),
    (6, 6, 6, '2021-03-10', 0), (7, 7, 7, '2021-03-11', 0), (8, 8, 8, '2021-03-10', 0), (9, 9, 9, '2021-03-11', 0), (10, 10, 10, '2021-03-11', 0);
INSERT INTO ITENSVENDA(IDITENSVENDA, IDPRODUTO, IDVENDA, QUANTIDADE, VALORVENDA,DESCONTO,LUCRO) VALUES
    (1, 1, 1, 2, 142.4, 0, 25), (2, 2, 2, 3, 143.50, 0, 24.67), (3, 3, 3, 5, 133.00, 0, 34), (4, 4, 4, 5, 131.90, 0, 19.67), (5, 5, 5, 6, 132.00, 0, 22.43), 
    (6, 6, 6, 3, 136.50, 0, 24), (7, 7, 7, 2, 138.00, 0, 18.90), (8, 8, 8, 10, 135.30, 0, 21), (9, 9, 9, 15, 135.10, 0, 20.80), (10, 10, 10, 18, 140.00, 0, 25);


-- BUSCA PELA DATA
SELECT * FROM TOTALVENDIDODIA('2021-04-11');
SELECT * FROM TOTALVENDIDODIA('2021-03-11');
SELECT * FROM TOTALVENDIDODIA('2021-03-10');

-- BUSCA PELO MÊS
SELECT * FROM TOTALVENDIDOMES(4);
SELECT * FROM TOTALVENDIDOMES(3);

-- BUSCA PELA QUANTIDADE
SELECT * FROM PRODUTOSABAIXOESTOQUE(10);

SELECT * FROM CLIENTESQUEDEVEM();
-- PELOS PRODUTOS MAIS VENDIDOS NO MÊS
SELECT * FROM PRODUTOSMAISVENDIDOS('03');

-- AUMENTA O VALOR DO PRODUTO NA FABRICA, PELA MARCA E PELA PROCENTAGEM
SELECT * FROM AUMENTARPRECOPRODUTOSMARCA('TUPER', 20);
SELECT * FROM AUMENTARPRECOPRODUTOSMARCA('MASTER', 15);

-- AUMENTA O VALOR DO PRODUTO NA FABRICA,PELA MARCA E PELA PROCENTAGEM
SELECT * FROM DIMINUIRPRECOPRODUTOSMARCA('TUPER', 10);
SELECT * FROM DIMINUIRPRECOPRODUTOSMARCA('MASTER', 5);




